/* libnotes.vapi generated by valac 0.48.6, do not modify. */

namespace Xnp {
	[CCode (cheader_filename = "libnotes.h")]
	public class Application : GLib.Object {
		public Application (string config_file);
		public Gtk.Menu context_menu ();
		public Xnp.Window create_window (string? name = null);
		public void open_about_dialog ();
		public void open_settings_dialog ();
		public void save_notes ();
		public void save_windows_configuration ();
		public void show_hide_notes ();
		public Application.with_notes_path (string config_file, string notes_path);
		public string config_file { get; construct; }
		public string notes_path { get; set construct; }
	}
	[CCode (cheader_filename = "libnotes.h")]
	public class HypertextView : Gtk.TextView {
		public HypertextView ();
		public void undo ();
		public void update_tags ();
		public string font { get; set; }
	}
	[CCode (cheader_filename = "libnotes.h")]
	public abstract class IconButton : Gtk.EventBox {
		protected bool active;
		protected IconButton ();
		public override void add (Gtk.Widget widget);
		public override bool draw (Cairo.Context cr);
		protected abstract void draw_icon (Cairo.Context cr, int width, int height);
		protected void set_widget_source_color (Cairo.Context cr);
		public signal void clicked ();
	}
	[CCode (cheader_filename = "libnotes.h")]
	public class Note : Gtk.ScrolledWindow {
		public Xnp.HypertextView text_view;
		public Note (string name);
		public bool dirty { get; set; }
		public new string name { get; set; }
		public signal void save_data ();
	}
	[CCode (cheader_filename = "libnotes.h")]
	public class Theme : GLib.Object {
		public Theme ();
		public static void set_background_color (string color);
	}
	[CCode (cheader_filename = "libnotes.h")]
	public class ThemeGtkcss : GLib.Object {
		public ThemeGtkcss ();
		public static string get_css_path ();
		public static void update_css (Gdk.Color color);
		public static void update_style_context ();
	}
	[CCode (cheader_filename = "libnotes.h")]
	public class TitleBarButton : Xnp.IconButton {
		public TitleBarButton (Xnp.TitleBarButtonType icon_type);
		protected override void draw_icon (Cairo.Context cr, int width, int height);
		public Xnp.TitleBarButtonType icon_type { get; set construct; }
	}
	[CCode (cheader_filename = "libnotes.h")]
	public class Window : Gtk.Window {
		public Window ();
		public int compare_func (Xnp.Window win2);
		public void delete_current_note ();
		public void delete_note (int page);
		public int get_current_page ();
		public void get_geometry (out int winx, out int winy, out int width, out int height);
		public string[] get_note_names ();
		public new void hide ();
		public Xnp.Note insert_note ();
		public void move_note (string note_name, int page);
		public void rename_current_note ();
		public void save_notes ();
		public void set_current_page (int page);
		public void set_font ();
		public void set_window_list (GLib.SList<Xnp.Window> list);
		public bool above { get; set; }
		public int n_pages { get; set; }
		public new string name { get; set; }
		public bool show_refresh_button { get; set; }
		public bool show_tabs { get; set; }
		public bool sticky { get; set; }
		public int tabs_position { get; set; }
		public signal void action (string action);
		public signal void note_deleted (Xnp.Note note);
		public signal void note_inserted (Xnp.Note note);
		public signal void note_renamed (Xnp.Note note, string old_name);
		public signal void save_data (Xnp.Note note);
	}
	[CCode (cheader_filename = "libnotes.h")]
	public class WindowMonitor : GLib.Object {
		public Xnp.Window window;
		public WindowMonitor (Xnp.Window window, GLib.File file);
		public signal void note_created (string note_name);
		public signal void note_deleted (string note_name);
		public signal void note_updated (string note_name);
		public signal void window_updated (Xnp.Window window);
	}
	[CCode (cheader_filename = "libnotes.h")]
	public enum TitleBarButtonType {
		EMPTY,
		CLOSE,
		LEFT_ARROW,
		RIGHT_ARROW,
		REFRESH
	}
}
